/Helvetica findfont dup length dict begin {1 index /FID ne {def} {pop pop} ifelse} forall /Encoding ISOLatin1Encoding def currentdict end /Helvetica exch definefont pop /Times-Roman findfont dup length dict begin {1 index /FID ne {def} {pop pop} ifelse} forall /Encoding ISOLatin1Encoding def currentdict end /Times-Roman exch definefont pop /Courier findfont dup length dict begin {1 index /FID ne {def} {pop pop} ifelse} forall /Encoding ISOLatin1Encoding def currentdict end /Courier exch definefont pop /Helvetica-Bold findfont dup length dict begin {1 index /FID ne {def} {pop pop} ifelse} forall /Encoding ISOLatin1Encoding def currentdict end /Helvetica-Bold exch definefont pop /Times-Bold findfont dup length dict begin {1 index /FID ne {def} {pop pop} ifelse} forall /Encoding ISOLatin1Encoding def currentdict end /Times-Bold exch definefont pop /Courier-Bold findfont dup length dict begin {1 index /FID ne {def} {pop pop} ifelse} forall /Encoding ISOLatin1Encoding def currentdict end /Courier-Bold exch definefont pop /Helvetica-Oblique findfont dup length dict begin {1 index /FID ne {def} {pop pop} ifelse} forall /Encoding ISOLatin1Encoding def currentdict end /Helvetica-Oblique exch definefont pop /Times-Italic findfont dup length dict begin {1 index /FID ne {def} {pop pop} ifelse} forall /Encoding ISOLatin1Encoding def currentdict end /Times-Italic exch definefont pop /Courier-Oblique findfont dup length dict begin {1 index /FID ne {def} {pop pop} ifelse} forall /Encoding ISOLatin1Encoding def currentdict end /Courier-Oblique exch definefont pop /Helvetica-BoldOblique findfont dup length dict begin {1 index /FID ne {def} {pop pop} ifelse} forall /Encoding ISOLatin1Encoding def currentdict end /Helvetica-BoldOblique exch definefont pop /Times-BoldItalic findfont dup length dict begin {1 index /FID ne {def} {pop pop} ifelse} forall /Encoding ISOLatin1Encoding def currentdict end /Times-BoldItalic exch definefont pop /Courier-BoldOblique findfont dup length dict begin {1 index /FID ne {def} {pop pop} ifelse} forall /Encoding ISOLatin1Encoding def currentdict end /Courier-BoldOblique exch definefont pop /x (X) def  /s ( ) def  /SPACE 16#20 def /BOX false def  /HDR false def  /PG 1 def  /S {[s 0 x 2] C} def /US {[s 0 x 3] C} def /T {[x 0 x 4] C} def /UT {[x 0 x 5] C} def /LM 72 def /NLM LM def /RM 540 def /NRM RM def /TOP 720 def /BOT 72 def /X LM def /Y TOP def /PLM 70 def /PRM 542 def /PTOP 722 def /PBOT 70 def /REM 0 def /TK 0 def /SC 0 def /JU 0 def /FH 0 def /MFH 0 def /ILM { LM 36 add /LM exch def /NLM LM def X 36 add /X exch def } def /DLM { LM 36 sub /LM exch def /NLM LM def X 36 sub /X exch def } def /DILM { NLM 36 add /NLM exch def } def /DDLM { NLM 36 sub /NLM exch def } def /IRM { RM 36 sub /RM exch def /NRM RM def } def /DRM { RM 36 add /RM exch def /NRM RM def } def /DIRM { NRM 36 sub /NRM exch def } def /DDRM { NRM 36 add /NRM exch def } def /LE { dup  dup /REM exch def X add 1 TK add  /TK exch def  dup RM gt  {pop SNL}  {/X exch def} ifelse } def /FFH { dup dup dup /FH exch def MFH gt   {/MFH exch def}  {pop}  ifelse } def /F { findfont exch FFH scalefont setfont } def /F2 {findfont exch scalefont setfont} def /TRUNC { count 0 gt { exch A dup 2 eq exch 3 eq or {  pop dup  L exch sub   /L exch def  TK 1 sub   /TK exch def  s stringwidth pop  exch div   SC exch sub   /SC exch def } {exch} ifelse } if } def /SXCJ { RM LM sub 2 div  L 2 div sub  LM add /X exch def } def /SXRJ { RM L sub /X exch def } def /SXFJ { /X LM def SC 0 gt {  RM LM sub   dup 4 div 3 mul   L gt  { /ADJ 0 def pop   }  { L sub  SC div  /ADJ exch def  }  ifelse } {/ADJ 0 def} ifelse } def /SX { TRUNC  JU 0 eq  { /X LM def }   { JU 1 eq  {SXCJ}  { JU 2 eq {SXRJ} {SXFJ} ifelse }  ifelse  } ifelse } def /SY { Y MFH sub  dup /Y exch def BOT lt  {  showpage  TOP MFH sub  /Y exch def  BOX {DB} if  HDR {PH} if } if /MFH FH def  } def /LEN { X LM sub /L exch def } def /LS { LEN  SX SY  X Y moveto } def /A {dup 3 get} def /C {  dup   A 0 eq {SH1} {A 1 eq  {SH1}  {A 2 eq  {SP1}   {A 3 eq {SP1}  {A 4 eq  {TB1}   {A 5 eq {TB1}  {A 6 eq  {B1}   {A 7 eq {B1}  {A 8 eq  {B1}   {A 9 eq {B1} {(E1) show}  ifelse  } ifelse } ifelse  } ifelse } ifelse  } ifelse } ifelse  } ifelse } ifelse  } ifelse } def /SH1 { aload pop pop  dup x eq   { pop pop}  {F}  ifelse stringwidth pop dup LL gt   {pop LL} if LE } def /SP1 { aload pop pop  dup x eq   {pop pop}  {F}  ifelse stringwidth pop dup X add  /X exch def dup s stringwidth pop div truncate  X RM gt  {  pop  X exch sub  /X exch def  pop   /REM 0 def  NL  } {  TK 1 add  /TK exch def  SC add   /SC exch def } ifelse } def /TB1 { pop X 72 add  72 div truncate 72 mul dup X sub  exch dup /X exch def RM gt  { pop pop  /REM 0 def  NL   }  { TK 1 add  /TK exch def  } ifelse } def /NL { LS TK 2 mul  -2 1 {  -2 roll C2 } for /TK 0 def  /LM NLM def  /X LM def  /REM 0 def  /SC 0 def  /RM NRM def  } def  /SNL { TK 2 mul 2 roll  TK 1 sub  /TK exch def LS TK 2 mul -2 1 {  -2 roll C2 } for /TK 1 def  /LM NLM def  REM LM add  /X exch def /REM 0 def  /SC 0 def  /RM NRM def  } def  /NP { NL  X LM eq Y TOP eq and not {   showpage   /X LM def   /Y TOP def   BOX {DB} if   HDR {PH} if  } if } def /B1 { aload pop pop  F stringwidth pop dup LL gt   {pop LL} if LE } def /DB { PLM PTOP moveto PRM PTOP lineto PRM PBOT lineto PLM PBOT lineto closepath stroke } def /printMime {  0 0 moveto  (MIME) true charpath } bind def  /printPage {  (Page ) stringwidth pop  PG 10 string cvs stringwidth pop add PRM exch sub  PTOP 2 add  moveto (Page ) show PG 10 string cvs show PG 1 add /PG exch def } def  /printHdr {  12 /Times-Roman F2 PLM 78 add PTOP 2 add moveto  MSG show  printPage  } def  /PH { gsave 24 /Times-Roman F2 gsave PLM 20 sub PTOP 12 add translate 1 -.05 0 {   setgray   printMime  fill   1 -.5 translate } for printMime  gsave 1 setgray fill grestore .2 setlinewidth stroke  grestore printHdr  grestore } def /C2 {  exch  A 0 eq {SH2} {A 1 eq  {USH}   {A 2 eq {SP2}  {A 3 eq  {USP}   {A 4 eq {TB2}  {A 5 eq  {UTB}   {A 6 eq {B2}  {A 7 eq  {UB}   {A 8 eq {P2}  {A 9 eq  {UP}   {(E2) show} ifelse  } ifelse } ifelse  } ifelse } ifelse  } ifelse } ifelse  } ifelse } ifelse  } ifelse } def /SH2 { aload pop pop  dup x eq   { pop pop}  {F2}  ifelse show pop } def /USH { aload pop pop  dup x eq   { pop pop}  {F2}  ifelse currentpoint  /Y1 exch def /X1 exch def X1 Y1 2 sub moveto exch 0 rlineto stroke X1 Y1 moveto  show } def /ADJSPC { /STR exch def  ADJ 0 SPACE STR widthshow  } def /SP2 { aload pop pop  dup x eq   {pop pop}  {F2}  ifelse JU 3 eq   {ADJSPC}   {show}  ifelse pop } def /USP { aload pop pop  dup x eq   {pop pop}  {F2}  ifelse currentpoint  2 sub /Y1 exch def /X1 exch def JU 3 eq   {ADJSPC}   {show}  ifelse currentpoint 0 -2 rmoveto  X1 Y1 lineto stroke  moveto  pop } def /TB2 { pop 0 rmoveto  } def /UTB { pop 0 -2 rmoveto  0 rlineto 0 2 rmoveto  currentpoint  stroke  moveto  } def /B2 { aload pop pop  F2 0 -2 rmoveto  show 0 2 rmoveto  pop } def /UB { aload pop pop  F2 currentpoint  /Y1 exch def /X1 exch def X1 Y1 2 sub moveto exch 0 rlineto stroke X1 Y1 2 sub moveto show 0 2 rmoveto  } def /FP { findfont exch dup /PH exch def scalefont setfont } def /P2 { aload pop pop  FP 0 PH rmoveto  show 0 PH neg rmoveto pop } def /UP { aload pop pop  FP currentpoint  /Y1 exch def /X1 exch def X1 Y1 2 sub moveto exch 0 rlineto stroke X1 Y1 PH add moveto show 0 PH neg rmoveto } def /LL {RM LM sub} def 